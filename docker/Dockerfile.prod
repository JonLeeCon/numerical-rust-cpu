# Also supports...
# - gitlab-registry.in2p3.fr/cta-lapp/cours/lecturedockerimages/ubuntu_micromamba_code_server:0.1
ARG BASE_IMAGE=ubuntu:22.04
FROM ${BASE_IMAGE}


# Need to be root for system setup
USER root


# Install distro packages dependencies
ENV GIT_SSL_NO_VERIFY=1
RUN apt-get update -y  \
    && apt-get install -y --no-install-recommends  \
                       bash build-essential ca-certificates curl git  \
                       libhdf5-dev libhwloc-dev libudev-dev pkg-config  \
                       unzip util-linux wget zip  \
    && rm -rf /var/lib/apt/lists/*


# Build an environment setup script that is executed both during the container
# image building process (before every RUN command) and when an image is started
# in interactive mode (via "docker run").
#
# This is harder than it sounds because...
#
# 1. RUN commands are run in a shell that, in bash terminology, is neither
#    a login shell nor an interactive shell. So our only hook for injecting
#    environment setup is BASH_ENV, which is queried for an environment setup
#    file to be sourced whenever a non-interactive shell starts.
# 2. Interactive container runs do not use a login shell (and we probably don't
#    want them to since /etc/profile does too much stuff), only an interactive
#    shell. So our only hook for injecting environment setup is bashrc files,
#    which are sourced anytime an interactive shell starts.
# 3. Some aspects of our environment setup should only run once per run, either
#    because they're not reentrant or unacceptably costly, and both hooks above
#    can lead to the environment setup script being sourced multiple times.
#
# The way we resolve this is that we point both BASH_ENV and bashrc to a script
# which checks if BASH_ENV is set, and if so unsets it and runs our environment
# setup. This works because...
#
# - The script is invoked for both interactive and non-interactive shells
# - Unsetting BASH_ENV after setup cleans up the environment and ensures that
#   the environment setup script is only run once.
#
# However, it only works with containers that use Docker-style layering where
# new environment is sourced between one RUN statement and the following one.
# For containers systems that do not follow this model like Singularity, another
# approach will need to be found.
#
SHELL ["/bin/bash", "-c"]
CMD bash
RUN touch /setup_env.sh  \
    && chmod a+rwx /setup_env.sh  \
    && echo 'if [ -n "${BASH_ENV}" ]; then  unset BASH_ENV; source /setup_env.sh;  fi' > /bash_env.sh  \
    && echo "source /bash_env.sh" >> /root/.bashrc  \
    && if [ -n "${MAMBA_USER}" ]; then  \
           echo "source /bash_env.sh" >> "/home/${MAMBA_USER}/.bashrc";  \
       fi
ENV BASH_ENV="/bash_env.sh"


# From this point on, we should only need to run commands as a regular user
# First define who the target user will be and where their homedir is...
RUN if [ -n "${MAMBA_USER}" ]; then  \
        echo "export DOCKER_USER=\"${MAMBA_USER}\"" >> /setup_env.sh;  \
        echo "export DOCKER_HOME=\"/home/${MAMBA_USER}\"" >> /setup_env.sh;  \
    else  \
        echo "export DOCKER_USER=root" >> /setup_env.sh;  \
        echo "export DOCKER_HOME=\"/root\"" >> /setup_env.sh;  \
    fi

# ...then get exercises in the right place, working around COPY not fully
# supporting container-defined env vars...
RUN mkdir /exercises
COPY exercises/rust-toolchain /exercises/rust-toolchain
RUN chown -R ${DOCKER_USER} /exercises  \
    && mv /exercises ${DOCKER_HOME}/exercises

# ...and finally, switch to the target user.
# Like many docker commands, USER has broken env var support.
# Fortunately, it also has broken error handling, so if the variable expands to
# nothing, the command will silently fail. This will keep us on the root user,
# which is what we want for the minimal alpine image...
USER ${MAMBA_USER}


# Install a Rust toolchain
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs >rustup.sh  \
    && bash rustup.sh -y --profile minimal  \
                      --default-toolchain="$(cat ~/exercises/rust-toolchain)"  \
    && echo "source \"${HOME}/.cargo/env\""  >> /setup_env.sh  \
    && rm rustup.sh


# Install cargo-examples, and minify the cargo cache
# (we only keep the cargo index since everyone is going to need it anyway)
RUN curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash \
    && cargo binstall -y cargo-cache cargo-examples cargo-sweep  \
    && cargo cache --remove-dir git-db,git-repos,registry-sources,registry-crate-cache --autoclean-expensive


# Integrate micromamba's default environment into our own
RUN if [ -n "${MAMBA_USER}" ]; then  \
        echo "source /usr/local/bin/_activate_current_env.sh" >> /setup_env.sh;  \
    fi
COPY docker/start_code_server.sh /bin/start_code_server.sh


# Add rust-analyzer + TOML syntax highlighting to the VSCode images
RUN if [ -n "${MAMBA_USER}" ]; then  \
        micromamba run code-server --install-extension rust-lang.rust-analyzer;  \
        micromamba run code-server --install-extension bungcip.better-toml;  \
    fi


# Install data-to-pics from the github parallel universe
RUN cargo install --git https://github.com/HadrienG2/grayscott.git data-to-pics


# Try to get all cargo prerequisites into the local cargo cache in order to
# please HPC sysadmins who are anxious about internet access
RUN cd ~  \
    && git clone --depth 1 --branch=solution  \
                 https://plmlab.math.cnrs.fr/grasland/numerical-rust-cpu.git  \
                 solution-repo  \
    && mv solution-repo/exercises solution  \
    && rm -rf solution-repo  \
    && cd solution  \
    && cargo fetch


# Utilisation: Lancer le vscode server en ouvrant le port 8080. Le mot de passe
# à saisir pour accéder au vscode sera indiqué au début de la sortie console.
#
#      podman run -p 8080:8080 --rm -it <image-micromamba>
